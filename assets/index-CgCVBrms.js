(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))i(r);new MutationObserver(r=>{for(const o of r)if(o.type==="childList")for(const s of o.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&i(s)}).observe(document,{childList:!0,subtree:!0});function n(r){const o={};return r.integrity&&(o.integrity=r.integrity),r.referrerPolicy&&(o.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?o.credentials="include":r.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function i(r){if(r.ep)return;r.ep=!0;const o=n(r);fetch(r.href,o)}})();const E="https://en.wikipedia.org/w/api.php",w="List_of_ursids",y={action:"parse",page:w,prop:"wikitext",section:"3",format:"json",origin:"*"},h="https://placehold.co/200x150?text=No+Image",C={FETCH_BEAR_DATA:"Unable to load bear data. Please try again later.",FETCH_IMAGE:"Unable to load bear image."},g=async t=>{const e=`${E}?${new URLSearchParams(t).toString()}`,n=await fetch(e);if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);return await n.json()},b=()=>{const t=document.querySelector(".show-hide"),e=document.querySelector(".comment-wrapper");if(!e){console.error("Comment wrapper element not found");return}if(e.style.display="none",!t){console.error("Show/Hide button not found");return}t.onclick=()=>{t.textContent==="Show comments"?(t.textContent="Hide comments",e.style.display="block"):(t.textContent="Show comments",e.style.display="none")}},S=()=>{const t=document.querySelector(".comment-form"),e=document.querySelector("#name"),n=document.querySelector("#comment"),i=document.querySelector(".comment-container");if(!t||!e||!n||!i){console.error("Required form elements not found in the DOM.");return}t.onsubmit=r=>{r.preventDefault();const o=document.createElement("li"),s=document.createElement("p"),m=document.createElement("p"),c=e.value,a=n.value;c&&a?(s.textContent=c,m.textContent=a,o.appendChild(s),o.appendChild(m),i.appendChild(o),e.value="",n.value=""):alert("Please enter both your name and comment.")}},x=t=>{const e=document.querySelector(".more_bears");if(!e){console.error("More Bears section not found in the DOM.");return}if(t.length===0)e.innerHTML="<p>No bear data available.</p>";else{const n=document.createElement("table"),i=document.createElement("caption");i.textContent="List of Various Bears",n.appendChild(i);const r=document.createElement("thead"),o=document.createElement("tr");["Name","Binomial Name","Image","Range"].forEach(c=>{const a=document.createElement("th");a.scope="col",a.textContent=c,o.appendChild(a)}),r.appendChild(o),n.appendChild(r);const m=document.createElement("tbody");t.forEach(c=>{const a=document.createElement("tr"),u=document.createElement("td");u.textContent=c.name,a.appendChild(u);const p=document.createElement("td");p.textContent=c.binomial,a.appendChild(p);const l=document.createElement("td"),d=document.createElement("img");d.src=c.image,d.alt=`${c.name} (${c.binomial})`,d.width=200,d.onerror=()=>{d.src=h},l.appendChild(d),a.appendChild(l);const f=document.createElement("td");f.textContent=c.range,a.appendChild(f),m.appendChild(a)}),n.appendChild(m),e.appendChild(n)}},A=t=>{const e=document.querySelector(".more_bears");if(!e){console.error("More Bears section not found in the DOM.");return}const n=document.createElement("p");n.classList.add("error-message"),n.textContent=t,e.innerHTML="",e.appendChild(n)},L=async()=>{try{const t=await g(y);if(!t.parse||!t.parse.wikitext)throw new Error("Invalid data structure returned from API.");const e=t.parse.wikitext["*"],n=await M(e);x(n)}catch(t){console.error("Error fetching bear data:",t),A(C.FETCH_BEAR_DATA)}},M=async t=>{const e=t.split("{{Species table/end}}"),n=[];for(const i of e){const r=i.split("{{Species table/row");for(const o of r){const s=o.match(/\|name=\[\[(.*?)\]\]/),m=o.match(/\|binomial=(.*?)\n/),c=o.match(/\|image=(.*?)\n/),a=o.match(/\|range\s*=\s*([^|\n]*)/);if(s&&m&&c){const u=c[1].trim().replace("File:",""),p=await P(u);let l="No range information available";a&&(l=a[1].trim(),l=l.replace(/\[\[|\]\]/g,"").trim(),l=l.replace(/''/g,"").trim(),l||(l="Range information not available."));const d={name:s[1],binomial:m[1].replace(/''/g,"").trim(),image:p,range:l};n.push(d)}}}return n},P=async t=>{try{const e={action:"query",titles:`File:${t}`,prop:"imageinfo",iiprop:"url",format:"json",origin:"*"},n=await g(e);if(!n.query||!n.query.pages)throw new Error("Invalid data structure returned from image API.");const i=n.query.pages,r=Object.values(i);if(r.length===0)throw new Error(`No image info available for file: ${t}`);const o=r[0];if(!o.imageinfo||o.imageinfo.length===0)throw new Error(`No image info available for file: ${t}`);return o.imageinfo[0].url}catch(e){return console.error(`Error fetching image URL for ${t}:`,e),h}};b();S();L();
